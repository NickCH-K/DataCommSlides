print()
})
# Print in function not on line
ditch <- 1:9 %>%
map(function(x) {
(ggplot(cities %>% filter(City == bigones$City[x]), aes(x = Date, y= mean_estimate)) +
geom_line(size = 2, color = 'red') +
theme_minimal() +
scale_y_continuous(labels = function(x) percent(x, accuracy = 1)) +
labs(y = "Proportion Staying Home",
title = paste('SafeGraph: Proportion Staying Home in',bigones$City[x]),
caption = bigones$note[x])) %>%
print()
cities %>%
filter(City == bigones$City[x]) %>%
mutate(mean_estimate = mean_estimate/first(mean_estimate)-1) %>%
filter(Date %in% reportdates) %>%
pull(mean_estimate) %>%
percent(accuracy = .1) %>%
paste('From 2020-03-01 to',reportdates,'in',bigones$City[x],'there was a',.,'change in percentage staying home.') %>%
print()
(ggplot(cities %>% filter(City == bigones$City[x], Date >= ymd('2020-05-01')), aes(x = Date, y= mean_estimate)) +
geom_line(size = 2, color = 'red') +
theme_minimal() +
scale_y_continuous(labels = function(x) percent(x, accuracy = 1)) +
labs(y = "Proportion Staying Home",
title = paste('SafeGraph: Proportion Staying Home in',bigones$City[x]),
caption = bigones$note[x])) %>%
print()
cities %>%
filter(City == bigones$City[x]) %>%
filter(Date >= ymd('2020-05-01')) %>%
mutate(mean_estimate = mean_estimate/first(mean_estimate)-1) %>%
filter(Date == ymd('2020-06-01')) %>%
pull(mean_estimate) %>%
percent(accuracy = .1) %>%
paste('From 2020-05-01 to 2020-06-01 in',bigones$City[x],'there was a',.,'change in percentage staying home.') %>%
print()
cities %>%
filter(City == bigones$City[x]) %>%
filter(Date >= ymd('2020-05-25')) %>%
mutate(mean_estimate = mean_estimate/first(mean_estimate)-1) %>%
filter(Date == ymd('2020-06-01')) %>%
pull(mean_estimate) %>%
percent(accuracy = .1) %>%
paste('From 2020-05-25 to 2020-06-01 in',bigones$City[x],'there was a',.,'change in percentage staying home.') %>%
print()
})
View(cities)
table(cities$City)
# Corresponding counties and big localities
bigones <- data.frame(statename = c('New York','California','Minnesota',
'Pennsylvania','Oregon',
'Illinois','Texas',
'Arizona','Ohio'),
countyname = c('New York City','Los Angeles County','Hennepin County',
'Philadelphia County','Multnomah County',
'Cook County','Harris County',
'Maricopa County','Columbus'),
City = c('New York City','Los Angeles','Minneapolis',
'Philadelphia','Portland',
'Chicago','Houston',
'Phoenix','Columbus'),
note = c('','Includes all Los Angeles County.','Includes all Hennepin County.',
'','Includes all Multnomah County and not areas outside Multnomah.',
'Includes all Cook County but not DuPage.','Includes all Harris County but not Fort Bend or Montgomery.',
'Includes all Maricopa County.','Includes all Delaware, Franklin, and Fairfield Counties.'))
cities <- compiled_data %>%
right_join(bigones) %>%
filter(Date >= ymd('2020-03-01'))
# Print in function not on line
ditch <- 1:9 %>%
map(function(x) {
(ggplot(cities %>% filter(City == bigones$City[x]), aes(x = Date, y= mean_estimate)) +
geom_line(size = 2, color = 'red') +
theme_minimal() +
scale_y_continuous(labels = function(x) percent(x, accuracy = 1)) +
labs(y = "Proportion Staying Home",
title = paste('SafeGraph: Proportion Staying Home in',bigones$City[x],'Since March 1'),
caption = bigones$note[x])) %>%
print()
cities %>%
filter(City == bigones$City[x]) %>%
mutate(mean_estimate = mean_estimate/first(mean_estimate)-1) %>%
filter(Date %in% reportdates) %>%
pull(mean_estimate) %>%
percent(accuracy = .1) %>%
paste('From 2020-03-01 to',reportdates,'in',bigones$City[x],'there was a',.,'change in percentage staying home.') %>%
print()
(ggplot(cities %>% filter(City == bigones$City[x], Date >= ymd('2020-05-01')), aes(x = Date, y= mean_estimate)) +
geom_line(size = 2, color = 'red') +
theme_minimal() +
scale_y_continuous(labels = function(x) percent(x, accuracy = 1)) +
labs(y = "Proportion Staying Home",
title = paste('SafeGraph: Proportion Staying Home in',bigones$City[x],'Since May 1'),
caption = bigones$note[x])) %>%
print()
cities %>%
filter(City == bigones$City[x]) %>%
filter(Date >= ymd('2020-05-01')) %>%
mutate(mean_estimate = mean_estimate/first(mean_estimate)-1) %>%
filter(Date == ymd('2020-06-01')) %>%
pull(mean_estimate) %>%
percent(accuracy = .1) %>%
paste('From 2020-05-01 to 2020-06-01 in',bigones$City[x],'there was a',.,'change in percentage staying home.') %>%
print()
cities %>%
filter(City == bigones$City[x]) %>%
filter(Date >= ymd('2020-05-25')) %>%
mutate(mean_estimate = mean_estimate/first(mean_estimate)-1) %>%
filter(Date == ymd('2020-06-01')) %>%
pull(mean_estimate) %>%
percent(accuracy = .1) %>%
paste('From 2020-05-25 to 2020-06-01 in',bigones$City[x],'there was a',.,'change in percentage staying home.') %>%
print()
})
library(ggdag)
library(tidyverse)
library(tidyverse)
library(gganimate)
library(ggdag)
library(jtools)
library(purrr)
help(ggdag)
dag <- dagify(ClassGrade ~ StudyTime + InterestInSubject,
StudyTime ~ InterestInSubject)
ggdag(dag) + theme_dag_blank()
plot.background = element_rect(color = '#FAFAFA',fill='#FAFAFA')
ggdag(dag) +
theme_dag_blank() +
theme(panel.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'),
plot.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'))
help(ggdag)
ggdag(dag, node_size = 0) +
theme_dag_blank() +
theme(panel.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'),
plot.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'))
ggdag(dag, node_size = FALSE) +
theme_dag_blank() +
theme(panel.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'),
plot.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'))
ggdag(dag, node = FALSE) +
theme_dag_blank() +
theme(panel.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'),
plot.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'))
ggdag(dag, node = FALSE, text = TRUE) +
theme_dag_blank() +
theme(panel.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'),
plot.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'))
ggdag_classic(dag) +
theme_dag_blank() +
theme(panel.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'),
plot.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'))
ggdag_classic(dag, size = 5) +
theme_dag_blank() +
theme(panel.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'),
plot.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'))
ggdag_classic(dag, size = 5) +
expand_limits(x = c(-1,8)) +
theme_dag_blank() +
theme(panel.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'),
plot.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'))
ggdag_classic(dag, size = 5) +
expand_limits(x = c(-1,1.3)) +
theme_dag_blank() +
theme(panel.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'),
plot.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'))
ggdag_classic(dag, size = 5) +
expand_limits(x = c(0,1.5)) +
theme_dag_blank() +
theme(panel.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'),
plot.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'))
ggdag_classic(dag, size = 5) +
expand_limits(x = c(0,1)) +
theme_dag_blank() +
theme(panel.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'),
plot.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'))
ggdag_classic(dag, size = 5) +
expand_limits(x = c(0,1.1)) +
theme_dag_blank() +
theme(panel.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'),
plot.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'))
help(dagify)
dag <- dagify(ClassGrade ~ StudyTime + InterestInSubject,
StudyTime ~ InterestInSubject,
coords = list(x = c(ClassGrade = 3, StudyTime = 1, InterestInSubject = 2),
y = c(ClassGrade = 1, StudyTime = 1, InterestInSubject = 2)))
ggdag_classic(dag, size = 5) +
expand_limits(x = c(0,3)) +
theme_dag_blank() +
theme(panel.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'),
plot.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'))
ggdag_classic(dag, size = 5) +
#expand_limits(x = c(0,3)) +
theme_dag_blank() +
theme(panel.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'),
plot.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'))
ggdag_classic(dag, size = 5) +
expand_limits(x = c(0,2)) +
theme_dag_blank() +
theme(panel.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'),
plot.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'))
ggdag_classic(dag, size = 5) +
expand_limits(x = c(1,2.1)) +
theme_dag_blank() +
theme(panel.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'),
plot.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'))
ggdag_classic(dag, size = 5) +
expand_limits(x = c(1,2.2)) +
theme_dag_blank() +
theme(panel.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'),
plot.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'))
ggdag_classic(dag, size = 5) +
expand_limits(x = c(1,2.5)) +
theme_dag_blank() +
theme(panel.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'),
plot.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'))
set.seed(40)
tb <- tibble(InterestInSubject = runif(200)) %>%
# Since InterestInSubject is used to make StudyTime, we know they're related
mutate(StudyTime = 4*runif() + InterestInSubject) %>%
mutate(ClassGrade = .1*StudyTime + .2*InterestInSubject)
tb <- tibble(InterestInSubject = runif(200)) %>%
# Since InterestInSubject is used to make StudyTime, we know they're related
mutate(StudyTime = 4*runif(200) + InterestInSubject) %>%
mutate(ClassGrade = .1*StudyTime + .2*InterestInSubject)
set.seed(40)
tb <- tibble(InterestInSubject = runif(200)) %>%
# Since InterestInSubject is used to make StudyTime, we know they're related
mutate(StudyTime = 4*runif(200) + InterestInSubject) %>%
mutate(ClassGrade = .1*StudyTime + .2*InterestInSubject)
# InterestInSubject is not in the model, it's in the error!
lm(ClassGrade ~ StudyTime, data = tb)
set.seed(40)
tb <- tibble(InterestInSubject = runif(200)) %>%
# Since InterestInSubject is used to make StudyTime, we know they're related
mutate(StudyTime = 4*runif(200) + InterestInSubject) %>%
mutate(ClassGrade = .1*StudyTime + InterestInSubject)
# InterestInSubject is not in the model, it's in the error!
lm(ClassGrade ~ StudyTime, data = tb)
tibble(InterestInSubject = runif(200)) %>%
mutate(StudyTime = 4*runif(200) + InterestInSubject) %>%
mutate(ClassGrade = .1*StudyTime + InterestInSubject) %>%
lm(ClassGrade~StudyTime, data = .) %>%
coef() %>%
`[`(2)) %>%
set.seed(50)
ests <- 1:500 %>%
map(function(x)
tibble(InterestInSubject = runif(200)) %>%
mutate(StudyTime = 4*runif(200) + InterestInSubject) %>%
mutate(ClassGrade = .1*StudyTime + InterestInSubject) %>%
lm(ClassGrade~StudyTime, data = .) %>%
coef() %>%
`[`(2)) %>%
unlist() %>%
data.frame()
ggplot(ests, aes(x = .)) +
geom_histogram() +
labs(x = 'StudyTime Coefficient',
y = 'Density') +
theme_metro_regtitle()
theme_metro <- function(x) {
theme_minimal() +
theme(panel.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'),
plot.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'),
text = element_text(size = 16),
axis.title.x = element_text(hjust = 1),
axis.title.y = element_text(hjust = 1, angle = 0))
}
theme_metro_regtitle <- function(x) {
theme_minimal() +
theme(panel.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'),
plot.background = element_rect(color = '#FAFAFA',fill='#FAFAFA'),
text = element_text(size = 16),
axis.title.x = element_text(hjust = 1),
axis.title.y = element_text(hjust = 1))
}
ggplot(ests, aes(x = .)) +
geom_histogram() +
labs(x = 'StudyTime Coefficient',
y = 'Density') +
theme_metro_regtitle()
ggplot(ests, aes(x = .)) +
geom_density() +
labs(x = 'StudyTime Coefficient',
y = 'Density') +
theme_metro_regtitle()
ggplot(ests, aes(x = .)) +
geom_density() +
labs(x = 'StudyTime Coefficient',
y = 'Density') +
geom_vline(aes(xintercept = .1), linetype = 'dashed', color = 'red') +
annotate(geom = 'label', x = .1, y = 10, label = 'True Value .1', hjust = 1) +
theme_metro_regtitle()
ggplot(ests, aes(x = .)) +
geom_density() +
labs(x = 'StudyTime Coefficient',
y = 'Density') +
geom_vline(aes(xintercept = .1), linetype = 'dashed', color = 'red') +
annotate(geom = 'label', x = .1, y = 10, label = 'True Value .1', hjust = 0) +
theme_metro_regtitle()
tibble(X = runif(100)) %>%
mutate(Y = .75*X + rnorm(sd=2*X)) %>%
ggplot(aes(x = X, y = Y)) +
geom_point() +
geom_smooth(method = 'lm', se = FALSE) +
theme_metro()
tibble(X = runif(100)) %>%
mutate(Y = .75*X + rnorm(100,sd=2*X)) %>%
ggplot(aes(x = X, y = Y)) +
geom_point() +
geom_smooth(method = 'lm', se = FALSE) +
theme_metro()
set.seed(1022)
tibble(X = runif(200)) %>%
mutate(Y = .75*X + rnorm(200,sd=2*X)) %>%
ggplot(aes(x = X, y = Y)) +
geom_point() +
geom_smooth(method = 'lm', se = FALSE) +
theme_metro()
help(export_summs)
tb <- tibble(X = runif(200)) %>%
mutate(Y = .75*X + rnorm(200,sd=2*X))
set.seed(1022)
tb <- tibble(X = runif(200)) %>%
mutate(Y = .75*X + rnorm(200,sd=2*X))
reg <- lm(Y~X, data = tb)
export_summs(reg, robust = TRUE)
export_summs(reg, robust = 'HC1')
export_summs(reg, robust = 'HC4')
help(vcovHAC, package = 'sandwich')
export_summs(reg, robust = 'HAC')
data(Orange)
treemodel <- lm(circumference~age, data = Orange)
export_summs(treemodel, cluster = tree)
export_summs(treemodel, cluster = Tree)
export_summs(treemodel, cluster = 'Tree')
data("EuStockMarkets")
force(EuStockMarkets)
lm(EuStockMarkets$DAX~EuStockMarkets$SMI)
library(Ecdat)
data("Housing")
Housing
lm(price~lotsize, data= Housing)
library(jtools)
m <- lm(price~lotsize, data= Housing)
export_summs(m)
export_summs(m, robust = TRUE)
plot_coefs(m)
install.package('ggstance')
install.packages('ggstance')
plot_coefs(m)
install.packages('broom.mixed')
plot_coefs(m)
install.packages('broom.mixed')
plot_coefs(m)
plot_summs(m)
effect_plot(m, plot.points = TRUE)
effect_plot(m, pred = 'lotsize', plot.points = TRUE)
m
vtable::vtable(Housing)
library(Ecdat)
data("Housing")
help(Housing)
View(Housing)
library(vtable)
vtable(Housing)
lm(price~lotsize,data=Housing)
m <- lm(price~lotsize,data=Housing)
library(jtools)
export_summs(m)
export_summs(m, robust = TRUE)
export_summs(m, cluster = 'bedrooms')
plot_coefs(m)
effect_plot(m,
pred = 'lotsize')
effect_plot(m,
pred = 'lotsize',
plot.points = TRUE)
data(Arrests, package = 'Ecdat')
data(Arrests, package = 'carData')
vtable::vt(Arrests)
data(UN, package = 'carData')
vtable::vt(UN)
head(UN)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
rinlinevarname <- function(code){
html <- '<code  class="r">``` `CODE` ```</code>'
sub("CODE", code, html)
}
knitr::kable(UN, row.names = TRUE)
UN %>%
mutate(Country = row.names(.),.before='region') %>%
select(Country, ppgdp, pctUrban) %>%
knitr::kable(row.names = TRUE)
help(UN)
UN %>%
mutate(Country = row.names(.),.before='region') %>%
select(Country, ppgdp, pctUrban) %>%
rename(`Per-Capita GDP` = ppgdp, `Percent Urban` = pctUrban) %>%
knitr::kable(row.names = TRUE, caption = 'Our Expansion Opportunities are Best in Rich, Urban Countries')
UN %>%
mutate(Country = row.names(.),.before='region') %>%
select(Country, ppgdp, pctUrban) %>%
rename(`Per-Capita GDP` = ppgdp, `Percent Urban` = pctUrban) %>%
knitr::kable(row.names = TRUE, caption = 'Our Expansion Opportunities are Best in Rich, Urban Countries')
UN %>%
mutate(Country = row.names(.),.before='region') %>%
select(Country, ppgdp, pctUrban) %>%
mutate(ppgdp = scales::dollar(ppgdp),
pctUrban = scales::percent(pctUrban/100),accuracy = 1) %>%
rename(`Per-Capita GDP` = ppgdp, `Percent Urban` = pctUrban) %>%
knitr::kable(row.names = TRUE, caption = 'Our Expansion Opportunities are Best in Rich, Urban Countries')
UN %>%
mutate(Country = row.names(.),.before='region') %>%
select(Country, ppgdp, pctUrban) %>%
mutate(ppgdp = scales::dollar(ppgdp),
pctUrban = scales::percent(pctUrban/100,accuracy = 1)) %>%
rename(`Per-Capita GDP` = ppgdp, `Percent Urban` = pctUrban) %>%
knitr::kable(row.names = TRUE, caption = 'Our Expansion Opportunities are Best in Rich, Urban Countries')
UN %>%
mutate(Country = row.names(.),.before='region') %>%
select(Country, ppgdp, pctUrban) %>%
sort(-pctUrban) %>%
slice(1:5) %>%
mutate(ppgdp = scales::dollar(ppgdp),
pctUrban = scales::percent(pctUrban/100,accuracy = 1)) %>%
rename(`Per-Capita GDP` = ppgdp, `Percent Urban` = pctUrban) %>%
knitr::kable(row.names = TRUE, caption = 'Top Five Opportunities for Expansion')
UN %>%
mutate(Country = row.names(.),.before='region') %>%
select(Country, ppgdp, pctUrban) %>%
arrange(-pctUrban) %>%
slice(1:5) %>%
mutate(ppgdp = scales::dollar(ppgdp),
pctUrban = scales::percent(pctUrban/100,accuracy = 1)) %>%
rename(`Per-Capita GDP` = ppgdp, `Percent Urban` = pctUrban) %>%
knitr::kable(row.names = TRUE, caption = 'Top Five Opportunities for Expansion')
UN %>%
mutate(Country = row.names(.),.before='region') %>%
select(Country, ppgdp, pctUrban) %>%
arrange(-pctUrban,-ppgdp) %>%
slice(1:5) %>%
mutate(ppgdp = scales::dollar(ppgdp),
pctUrban = scales::percent(pctUrban/100,accuracy = 1)) %>%
rename(`Per-Capita GDP` = ppgdp, `Percent Urban` = pctUrban) %>%
knitr::kable(row.names = TRUE, caption = 'Top Five Opportunities for Expansion')
UN %>%
mutate(Country = row.names(.),.before='region') %>%
select(Country, ppgdp, pctUrban) %>%
arrange(-pctUrban,-ppgdp) %>%
slice(1:5) %>%
mutate(ppgdp = scales::dollar(ppgdp),
pctUrban = scales::percent(pctUrban/100,accuracy = 1)) %>%
rename(`Per-Capita GDP` = ppgdp, `Percent Urban` = pctUrban) %>%
knitr::kable(caption = 'Top Five Opportunities for Expansion')
help(kable_styling, package = 'kableExtra')
UN %>%
mutate(Country = row.names(.),.before='region') %>%
select(Country, ppgdp, pctUrban) %>%
arrange(-pctUrban,-ppgdp) %>%
slice(1:5) %>%
mutate(ppgdp = scales::dollar(ppgdp),
pctUrban = scales::percent(pctUrban/100,accuracy = 1)) %>%
rename(`Per-Capita GDP` = ppgdp, `Percent Urban` = pctUrban) %>%
knitr::kable(caption = 'Top Five Opportunities for Expansion') %>%
kableExtra::kable_styling(bootstrap_options = c('striped','hover'))
library(swirl)
install_course_github('NickCH-K','Econometrics')
install_course_github('NickCH-K','Econometrics')
swirl()
# libraries
library(tidyverse)
library(vtable)
library(jtools)
# a.	Use read_csv in tidyverse to load the data set nickchk.com/ad_spend_and_gdp.csv and save it as ads
ads <- read_csv('nickchk.com/ad_spend_and_gdp.csv')
# a.	Use read_csv in tidyverse to load the data set nickchk.com/ad_spend_and_gdp.csv and save it as ads
ads <- read_csv('http://nickchk.com/ad_spend_and_gdp.csv')
# b. Use vtable in vtable to look at the variables in the data
vtable(ads)
# c. Use ggplot to make a scatterplot (geom_point) with ad spending on the X axis and GDP on the y axis
# (structure: ggplot(data, aes(x=xvar, y = yvar)) + geom_point())
ggplot(ads, aes(x = AdSpending, y = GDP)) + geom_point()
# e. Regress GDP on AdSpending and save the regression as ad_reg
ad_reg <- lm(GDP~AdSpending, data = ads)
# f. Use export_summs from jtools to look at the regression results
export_summs(ad_reg)
# g. Use effect_plot() (with plot.points = TRUE) to plot the regression
effect_plot(ad_reg, pred = AdSpending, plot.points = TRUE)
# i. Regardless of your answer to h, rerun export_summs with robust = TRUE
export_summs(ad_reg, robust = TRUE)
install.packages('vtable',repos='https://ftp.osuosl.org/pub/cran/')
setwd("C:/Users/nickc/Dropbox (CSU Fullerton)/CI Book/chapters/DescribingRelationships")
oster <- read_dta('nhanes_summary_cleaned.dta')
{
library(tidyverse)
library(vtable)
library(purrr)
library(cowplot)
library(Cairo)
library(extrafont)
library(haven)
}
oster <- read_dta('nhanes_summary_cleaned.dta')
vt(oster)
oster <- oster %>% select(year, race, gender, age, hh_size, marital_status, highbp_diagnosed, highcholesterol_diagnosed, hh_income, diabetes_diagnosed, pregnant, cancer, starts_with('supplement_'), bp_systolic, bp_diastolic, low_fat_diet, bmi, times_saw_doctor_past_year, starts_with('exercise_'),bad_food_share, smoke, )
setwd("C:/Users/nickc/Dropbox (CSU Fullerton)/Teaching/Data Communication/Lectures")
save(oster, 'oster_vitamine_data.Rdata')
save(oster, file='oster_vitamine_data.Rdata')
